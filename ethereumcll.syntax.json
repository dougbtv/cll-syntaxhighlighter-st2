{
	"name": "EthereumCLL",
	"scopeName": "source.cll",
	"fileTypes": ["cll"],
	"uuid": "478daf6a-0ade-445a-ade6-017317a19319",
	"patterns": [
	        { "match": "(contract|tx|block)\\.([A-Za-z][A-Za-z0-9_]+)",
	        "name": "keyword.cll",
	        "captures": {
	            "1": { "name": "support.function.cll" },
	            "2": { "name": "support.function.cll" }
	         },
	        "comment": "contract, transaction, and block variables"
	      },
	       { "match": "(sha256|sha3|ripemd160|ecsign|ecrecover|ecvalid|ecadd|ecmul)",
	        "name": "keyword.cll",
	        "captures": {
	            "1": { "name": "support.function.cll" }
	         },
	        "comment": "fun functions"
	      },
	      { "match": "(//).*?($\\n?|(?=\\?&gt;))",
	        "name": "comment.line.double-slash.cll",
	        "captures": {
	            "1": { "name": "punctuation.definition.comment.cll" }
	         },
	        "comment": "double slash comments"
	      },
	      { "match": "(if|elif|stop|while|else|\\#define|\\%|/|=|==|>|>=|<=|\\+|\\-|\\*|\\^|\\:)",
	        "name": "keyword.control.cll",
	        "captures": {
	            "1": { "name": "keyword.control.cll" }
	         },
	        "comment": "contract variables"
	      },
	      { "match": "\\b([0-9]+)\\b",
	        "name": "constant.numeric.cll",
	        "captures": {
	            "1": { "name": "constant.numeric.cll" }
	         },
	        "comment": "numbers"
	      },
	      { "match": "\\b([A-Z_]+)\\b",
	        "name": "entity.name.function.cll",
	        "captures": {
	            "1": { "name": "entity.name.function.cll" }
	         },
	        "comment": "constants with all caps"
	      }
	]
}

/*



<dict>
		<key>match</key>
		<string>(?i)\b(TRUE|FALSE|NULL|__(FILE|FUNCTION|CLASS|METHOD|LINE)__|ON|OFF|YES|NO|NL|BR|TAB)\b</string>
		<key>name</key>
		<string>constant.language.php</string>
	</dict>

	 'sha256': ['SHA256', 3],
    'sha3': ['SHA3', 3],
    'ripemd160': ['RIPEMD160', 3],
    'ecsign': ['ECSIGN', 2],
    'ecrecover': ['ECRECOVER', 4],
    'ecvalid': ['ECVALID', 2],
    'ecadd': ['ECADD', 4],
    'ecmul': ['ECMUL', 3],

<key>numbers</key>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b</string>
			<key>name</key>
			<string>constant.numeric.php</string>
		</dict>

<dict>
	<key>match</key>
	<string>(?i)\bpreg_(split|quote|last_error|grep|replace(_callback)?|match(_all)?)(?=\s*\()</string>
	<key>name</key>
	<string>support.function.php_pcre.php</string>
</dict>

<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.php</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*?($\n?|(?=\?&gt;))</string>
					<key>name</key>
					<string>comment.line.double-slash.php</string>

*/